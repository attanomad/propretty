# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Amenity {
  id: String!
  name: String!
  description: String
}

type Token {
  accessToken: String!
}

type File {
  id: String!
  name: String!
  mimetype: String!
  url: String!
}

type Location {
  id: String!
  address: String
  subdistrict: String
  district: String
  province: String
  country: String
  postalCode: String
  latitude: Decimal
  longitude: Decimal
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

type User {
  id: String!
  username: String!
  hashedPassword: String!
  roles: [Role!]!
}

enum Role {
  Viewer
  Agent
  Admin
}

type PropertyType {
  id: String!
  name: String!
  description: String
}

type Price {
  id: String!
  currency: String!
  price: Decimal!
}

type PropertyMedia {
  id: String!
  mimetype: String!
  url: String!
}

type Property {
  id: String!
  name: String!
  description: String
  status: String!
  priceList: [Price!]!
  commercialStatus: PropertyCommercialStatus
  uniqueCode: String
  floorSize: Decimal
  landSize: Decimal
  furnishing: PropertyFurnishing
  type: PropertyType!
  mediaList: [PropertyMedia]!
  amenities: [Amenity]!
  authorId: String!
  author: User!
  location: Location
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum PropertyCommercialStatus {
  AVAILABLE
  RENTED
  SOLD
  PENDING
}

enum PropertyFurnishing {
  FULLY_FURNISHED
  SEMI_FURNISHED
  UNFURNISHED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Query {
  findProperty(id: String!): Property!
  properties(id: String, name: String, typeId: String): [Property!]!
  propertyTypes(id: String, name: String): [PropertyType!]!
  amenities(id: String, name: String): [Amenity!]!
  files: [File!]!
}

type Mutation {
  login(credentials: LoginInput!): Token!
  createProperty(createPropertyData: CreatePropertyInput!): Property!
  updateProperty(id: String!, updatePropertyData: UpdatePropertyInput!): Property!
  createPropertyType(createPropertyTypeData: CreatePropertyTypeInput!): PropertyType!
  createAmenity(createAmenityData: CreateAmenityInput!): Amenity!
  generateSignedUrl(name: String!, mimeType: String!): String!
}

input LoginInput {
  username: String!
  password: String!
}

input CreatePropertyInput {
  name: String!
  status: Status!
  description: String
  uniqueCode: String
  typeId: String!
  commercialStatus: PropertyCommercialStatus
  floorSize: Decimal
  landSize: Decimal
  furnishing: PropertyFurnishing
  priceList: [CreatePriceInput!]
  amenityIds: [String]
  mediaList: [String]
  location: UpsertLocationInput
}

enum Status {
  ACTIVE
  INACTIVE
}

input CreatePriceInput {
  currency: String!
  price: Decimal!
}

input UpsertLocationInput {
  id: String
  address: String
  subdistrict: String
  district: String
  province: String
  country: String
  postalCode: String
  latitude: Decimal
  longitude: Decimal
}

input UpdatePropertyInput {
  name: String
  status: Status
  description: String
  uniqueCode: String
  typeId: String
  commercialStatus: PropertyCommercialStatus
  floorSize: Decimal
  landSize: Decimal
  furnishing: PropertyFurnishing
  priceList: [CreatePriceInput!]
  amenityIds: [String!]
  mediaList: [String!]
  location: UpsertLocationInput
}

input CreatePropertyTypeInput {
  name: String!
  description: String
}

input CreateAmenityInput {
  name: String!
  description: String
}