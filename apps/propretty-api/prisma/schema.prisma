// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

generator nestgraphql {
  provider    = "node node_modules/prisma-nestjs-graphql"
  // for yarn monorepos
  // provider = "prisma-nestjs-graphql"
  output      = "../src/@generated"
  // requireSingleFieldsInWhereUniqueInput = true
  // emitSingle                            = true
  // emitCompiled                          = true
  purgeOutput = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String @id @default(cuid())
  // email String @unique
  username       String @unique
  // emailVerified Boolean @default(false)
  hashedPassword String

  roles Role[]

  // Direct permissions
  permissions        Permission[]
  assignedProperties Property[]   @relation(name: "AgentToProperty")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  permissions Permission[]
  users       User[]
}

enum PermissionSubject {
  User
  Property
  PropertyType
  Amenity
  Client
  Tenant
  Agent
}

model Permission {
  id String @id @default(cuid())

  // true ? can() : cannot()
  isAllowed Boolean           @default(true)
  subject   PermissionSubject
  action    String

  // Subject field
  field String[]

  // CASL conditions (Prisma Query object)
  conditions Json? @db.JsonB

  roles Role[]
  users User[]

  @@unique([subject, action])
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
}

enum PropertyListingType {
  FOR_SALE
  FOR_RENT
}

enum PropertyListingStatus {
  LISTED
  UNLISTED
}

enum PropertyFurnishing {
  FULLY_FURNISHED
  SEMI_FURNISHED
  UNFURNISHED
}

enum PropertyCommercialStatus {
  AVAILABLE
  RENTED
  SOLD
  PENDING
}

/// @ObjectType('PropertyGenerated')
model Property {
  id               String                   @id @default(cuid())
  name             String
  description      String?
  status           PropertyStatus
  commercialStatus PropertyCommercialStatus @default(AVAILABLE)
  uniqueCode       String?                  @unique
  // sq.m.
  floorSize        Decimal?                 @db.Decimal(10, 2)
  // sq.m.
  landSize         Decimal?                 @db.Decimal(10, 2)
  furnishing       PropertyFurnishing?

  // Images, Videos, Floor plan, 3D, legal documents, etc.
  mediaList File[]
  priceList Price[]
  location  Location? @relation(fields: [locationId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  typeId String
  type   PropertyType @relation(fields: [typeId], references: [id])

  amenities PropertyAmenity[]

  locationId          String?
  PropertyOwner       PropertyOwner?               @relation(fields: [propertyOwnerId], references: [id])
  propertyOwnerId     String?
  PropertyListing     PropertyListing[]
  assignedAgents      User[]                       @relation(name: "AgentToProperty")
  leases              Lease[]
  maintenanceRequests PropertyMaintenanceRequest[]
}

model PropertyListing {
  id     String                @id @default(cuid())
  status PropertyListingStatus
  type   PropertyListingType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
}

model PropertyOwner {
  id                String     @id @default(cuid())
  firstName         String
  lastName          String
  profilePictureUrl String?
  dob               DateTime?
  properties        Property[]
}

model Price {
  id       String  @id @default(cuid())
  currency String
  price    Decimal @db.Decimal(10, 2)

  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String

  @@unique([currency, propertyId])
}

// TODO: Use PostGis Postgres extension for lat/long
model Location {
  id          String     @id @default(cuid())
  address     String?
  subdistrict String?
  district    String?
  province    String?
  country     String?
  postalCode  String?
  latitude    Decimal?   @db.Decimal(9, 6)
  longitude   Decimal?   @db.Decimal(9, 6)
  Property    Property[]
}

model PropertyType {
  /// @HideField({ match: 'PropertyTypeCreateInput' })
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  /// @HideField({ input: true })
  Property Property[]
}

model PropertyAmenity {
  /// @HideField({ match: 'PropertyAmenityCreateInput' })
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  /// @HideField({ input: true })
  createdAt DateTime @default(now())

  /// @HideField({ input: true })
  updatedAt DateTime @updatedAt

  /// @HideField({ input: true })
  properties Property[]
}

model File {
  id       String     @id @default(cuid())
  name     String
  path     String
  mimetype String
  size     BigInt
  Property Property[]
}

model Contact {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tenant {
  id          String    @id @default(cuid())
  nationalId  String    @unique
  firstName   String?
  lastName    String?
  email       String?
  phoneNumber String?
  dateOfBirth DateTime?
  gender      String?
  address     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  leases              Lease[]
  maintenanceRequests PropertyMaintenanceRequest[]
}

model Lease {
  id            String      @id @default(cuid())
  propertyId    String
  tenantId      String
  startedDate   DateTime
  endDate       DateTime
  status        LeaseStatus
  rentAmount    Decimal     @db.Decimal(10, 2)
  depositAmount Decimal     @db.Decimal(10, 2)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  property            Property                     @relation(fields: [propertyId], references: [id])
  tenant              Tenant                       @relation(fields: [tenantId], references: [id])
  maintenanceRequests PropertyMaintenanceRequest[]
}

enum LeaseStatus {
  Active
  Pending
  Terminated
  Expired
}

model PropertyMaintenanceRequest {
  id          String                           @id @default(cuid())
  propertyId  String
  tenantId    String
  leaseId     String
  title       String
  description String
  requestedAt DateTime
  status      PropertyMaintenanceRequestStatus @default(Pending)
  createdAt   DateTime                         @default(now())
  updatedAt   DateTime                         @updatedAt

  property   Property                             @relation(fields: [propertyId], references: [id])
  tenant     Tenant                               @relation(fields: [tenantId], references: [id])
  lease      Lease                                @relation(fields: [leaseId], references: [id])
  activities PropertyMaintenanceRequestActivity[]
}

model PropertyMaintenanceRequestActivity {
  id          String                           @id @default(cuid())
  requestId   String
  status      PropertyMaintenanceRequestStatus @default(Pending)
  description String
  createdAt   DateTime                         @default(now())
  updatedAt   DateTime                         @updatedAt

  request PropertyMaintenanceRequest @relation(fields: [requestId], references: [id])
}

enum PropertyMaintenanceRequestStatus {
  Pending
  InProgress
  Completed
  Cancelled
}
