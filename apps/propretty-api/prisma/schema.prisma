// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String @id @default(cuid())
  // email String @unique
  username       String @unique
  // emailVerified Boolean @default(false)
  hashedPassword String

  roles      String[]
  properties Property[]
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
}

enum PropertyListingType {
  FOR_SALE
  FOR_RENT
}

enum PropertyListingStatus {
  LISTED
  UNLISTED
}

enum PropertyFurnishing {
  FULLY_FURNISHED
  SEMI_FURNISHED
  UNFURNISHED
}

enum PropertyCommercialStatus {
  AVAILABLE
  RENTED
  SOLD
  PENDING
}

model Property {
  id               String                   @id @default(cuid())
  name             String
  description      String?
  status           PropertyStatus
  commercialStatus PropertyCommercialStatus @default(AVAILABLE)
  uniqueCode       String?                  @unique
  // sq.m.
  floorSize        Decimal?                 @db.Decimal(10, 2)
  // sq.m.
  landSize         Decimal?                 @db.Decimal(10, 2)
  furnishing       PropertyFurnishing?

  // Images, Videos, Floor plan, 3D, legal documents, etc.
  mediaList File[]
  priceList Price[]
  location  Location? @relation(fields: [locationId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  typeId String
  type   PropertyType @relation(fields: [typeId], references: [id])

  amenities PropertyAmenity[]

  authorId        String
  author          User              @relation(fields: [authorId], references: [id])
  locationId      String?
  PropertyOwner   PropertyOwner?    @relation(fields: [propertyOwnerId], references: [id])
  propertyOwnerId String?
  PropertyListing PropertyListing[]
}

model PropertyListing {
  id     String                @id @default(cuid())
  status PropertyListingStatus
  type   PropertyListingType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
}

model PropertyOwner {
  id                String     @id @default(cuid())
  firstName         String
  lastName          String
  profilePictureUrl String?
  dob               DateTime?
  properties        Property[]
}

model Price {
  id       String  @id @default(cuid())
  currency String
  price    Decimal @db.Decimal(10, 2)

  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String

  @@unique([currency, propertyId])
}

// TODO: Use PostGis Postgres extension for lat/long
model Location {
  id          String     @id @default(cuid())
  address     String?
  subdistrict String?
  district    String?
  province    String?
  country     String?
  postalCode  String?
  latitude    Decimal?   @db.Decimal(9, 6)
  longitude   Decimal?   @db.Decimal(9, 6)
  Property    Property[]
}

model PropertyType {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  Property    Property[]
}

model PropertyAmenity {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  properties Property[]
}

model File {
  id       String     @id @default(cuid())
  name     String
  path     String
  mimetype String
  size     BigInt
  Property Property[]
}

model Contact {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
